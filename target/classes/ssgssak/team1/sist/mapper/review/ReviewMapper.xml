<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="ssgssak.team1.sist.mapper.review.ReviewMapper">
	
<!-- 	List<ReviewDTO> select(long productcode) throws SQLException;

	List<ReviewDTO> select (int currentPage, int numberPerPage,long productcode) throws SQLException ; 

	int insertReview(long productid,String memid,int productOptionId,String reviewContent,String reviewType,double grade ,int q1,int q2,int q3 ) throws SQLException;


	int insertReviewImg(String reviewImgUrl) throws SQLException; -->
	
<!-- ssgssak.team1.sist.domain.review. -->
<!-- 
	페이징안된 리뷰리스트 List<ReviewDTO> select(long productcode) throws SQLException; 
	<select id="select" resultType="ssgssak.team1.sist.domain.review.ReviewDTO">
		SELECT r.ID, r.PRODUCTID, r.MEMID, r.PRODUCTOPTIONID, r.REVIEWCONTENT, r.REVIEWDATE, r.REVIEWTYPE, r.GRADE, r.Q1, r.Q2, r.Q3 
		FROM product p JOIN review r ON p.id =r.productId  
		 WHERE p.id = #{id}
	</select>
 -->
 
 	<!-- List<ReviewDTO> select(long productcode) throws SQLException; -->
 	<select id="select" resultType="ssgssak.team1.sist.domain.review.ReviewDTO">
 		SELECT r.ID, r.PRODUCTID, r.MEMID, r.PRODUCTOPTIONID, r.REVIEWCONTENT, r.REVIEWDATE, r.REVIEWTYPE, r.GRADE, r.Q1, r.Q2, r.Q3 
		FROM product p JOIN review r ON p.id =r.productId  
		WHERE p.id = #{id}
 	</select>
 	
 
	<!-- List<ReviewDTO> selectP (int currentPage, int numberPerPage,long productcode) throws SQLException ;  -->	
	<select id="selectP" resultType="ssgssak.team1.sist.domain.review.ReviewDTO">
    
    SELECT * 
    FROM (
        SELECT ROWNUM no, t.* 
        FROM (
            SELECT r.ID, r.PRODUCTID, r.MEMID, r.PRODUCTOPTIONID, r.REVIEWCONTENT, r.REVIEWDATE, r.REVIEWTYPE, r.GRADE, r.Q1, r.Q2, r.Q3, po.OPTIONNAME
            FROM review r 
            JOIN productoption po ON r.productoptionid = po.id
            WHERE r.PRODUCTID = #{id}
            <if test="reviewType != null and reviewType != ''"> 
              AND r.REVIEWTYPE = '${reviewType}'
            </if>
            ORDER BY 
            <choose>
              <when test="sort == '최신순'">
                r.ID DESC
              </when>            
              <when test="sort == '평점높은순'">
                r.GRADE DESC
              </when>            
              <when test="sort == '평점낮은순'">
                r.GRADE ASC
              </when>            
              <otherwise>
                r.ID DESC
              </otherwise>
            </choose>
        ) t
        WHERE ROWNUM <![CDATA[ <= ]]> #{numberPerPage} * #{currentPage}
    ) 
    WHERE no <![CDATA[ > ]]> #{numberPerPage} * (#{currentPage} - 1)
   
</select>


	
	<!--  총 레코드 가져오기 int getTotalRecords() throws SQLException; -->
	<select id="getTotalRecords" resultType="Integer">
		SELECT COUNT(*)
		 FROM review 
	</select>
	
	<!-- 총 페이지 가져오기 int getTotalPages(int numberPerPage, long productcode) throws SQLException; -->
	<select id="getTotalPages" resultType="Integer">
		SELECT CEIL(COUNT(*) / #{numberPerPage}) 
		FROM review 
		WHERE PRODUCTID = #{id}
		<if test="reviewType != null and reviewType !=''" >
			AND REVIEWTYPE = '${reviewType}'
		</if>		
	</select>
	
	<!--리뷰입력 int insertReview(String reviewImgUrl) throws SQLException; -->
	<insert id="insertReview" >
			INSERT INTO review (id, productid, memid, productOptionId, reviewContent, reviewDate, reviewType, grade, q1, q2, q3) 
	        VALUES (review_seq.NEXTVAL, #{productid}, #{memid}, #{productOptionId}, #{reviewContent}, sysdate, #{reviewType}, #{grade}, #{q1}, #{q2}, #{q3}) 
	</insert>




	<!-- 유저리뷰 -->
	<select id="selectUP" resultType="ssgssak.team1.sist.domain.review.ReviewDTO">
	    SELECT * 
    FROM (
        SELECT ROWNUM no, t.* 
        FROM (
            SELECT  r.ID, r.PRODUCTID, r.MEMID, r.PRODUCTOPTIONID, r.REVIEWCONTENT, r.REVIEWDATE, r.REVIEWTYPE, r.GRADE, r.Q1, r.Q2, r.Q3, po.OPTIONNAME
            FROM review r JOIN member m
                            ON r.memid = m.id
                            JOIN productoption po
                            ON r.productoptionid = po.id
            WHERE m.id= #{auth}
              <if test="reviewType != null and reviewType != ''"> 
              AND r.REVIEWTYPE = '${reviewType}'
            </if>
            ORDER BY 
              <choose>
              <when test="sort == '최신순'">
                r.ID DESC
              </when>            
              <when test="sort == '평점높은순'">
                r.GRADE DESC
              </when>            
              <when test="sort == '평점낮은순'">
                r.GRADE ASC
              </when>            
              <otherwise>
                r.ID DESC
              </otherwise>
            </choose>
        ) t
        WHERE ROWNUM <![CDATA[ <= ]]> #{numberPerPage} * #{currentPage}
    ) 
    WHERE no <![CDATA[ > ]]> #{numberPerPage} * (#{currentPage} - 1)
	</select>
	<!-- int getUserTotalRecords( @Param("auth") String auth) throws SQLException; -->
		<select id="getUserTotalRecords" resultType="Integer">
		SELECT COUNT(*)
		 FROM review r JOIN member m
                            ON r.memid = m.id
		 WHERE m.id = #{auth}
	</select>
	 <!-- int getUserTotalPages(@Param("numberPerPage")int numberPerPage, @Param("auth") String auth,@Param("reviewType")String reviewType) throws SQLException; -->
		<select id="getUserTotalPages" resultType="Integer">
		SELECT CEIL(COUNT(*) / #{numberPerPage}) 
		FROM review r JOIN member m
                            ON r.memid = m.id
		 WHERE m.id = #{auth}
		<if test="reviewType != null and reviewType !=''" >
			AND REVIEWTYPE = '${reviewType}'
		</if>		
	</select>
	
	 <!-- 유저 리뷰리스트 List<ReviewDTO> selectU(@Param("auth")String auth) throws SQLException; -->
	 <select id="selectU" resultType="ssgssak.team1.sist.domain.review.ReviewDTO">
	 	SELECT  r.ID, r.PRODUCTID, r.MEMID, r.PRODUCTOPTIONID, r.REVIEWCONTENT, r.REVIEWDATE, r.REVIEWTYPE, r.GRADE, r.Q1, r.Q2, r.Q3, po.OPTIONNAME
            FROM review r JOIN member m
                            ON r.memid = m.id
                            JOIN productoption po
                            ON r.productoptionid = po.id
            WHERE m.id =#{auth}
	 </select>
	
<!-- 		 int deleteReview(@Param("reviewId")int reviewId)throws Exception;
	 int deleteReviewImg(@Param("reviewId")int reviewId)throws Exception; -->
<delete id="deleteReview">

    DELETE FROM review WHERE id = #{reviewId}
</delete>

<delete id="deleteReviewImg">

    DELETE FROM reviewImg WHERE reviewId = #{reviewId}

</delete>

<select id="getBeforeReview" resultType="ssgssak.team1.sist.domain.review.BeforeReviewVO">
	SELECT p.ID, p.ORDERDATE, p.ORDERAMOUNT,p.PMETHOD, p.PRESENT
		,pd.quantity,pr.ID productid, pr.CATEGORYID, pr.SPECIALPRICEID
		, pr.SHIPPINGOPTIONID, pr.SELLERSTOREID, pr.BRANDID, pr.PDNAME
		, pr.PCONTENT, pr.UPDATEDAY, br.BRANDNAME,po.optionname,pi.imgurl
	FROM payrecord p JOIN paydetail pd
	                ON p.id=pd.id2 
	                JOIN productoption po 
	                ON po.id = pd.id3
	                JOIN product pr
	                ON pr.id= po.productid
	                JOIN brand br
	                ON br.id=pr.brandid
	                JOIN productimg pi
	                ON pi.productid=pr.id
	                LEFT JOIN review r
	                ON pd.id3 = r.productoptionid
	WHERE p.memid=#{auth} AND pi.imgcontent ='sum'  AND r.id IS NULL
</select>


</mapper>


